Full code crud  node js with contex api  react ts

ChatGPT
Sure, here's an example of a CRUD (Create, Read, Update, Delete) application using Node.js for the backend and React with TypeScript for the frontend, incorporating Context API for state management:

Backend (Node.js):
javascript
Copy code
// server.js
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 5000;

app.use(bodyParser.json());
app.use(cors());

let data = [];

// Create
app.post('/api/items', (req, res) => {
  const newItem = req.body;
  data.push(newItem);
  res.json(newItem);
});

// Read
app.get('/api/items', (req, res) => {
  res.json(data);
});

// Update
app.put('/api/items/:id', (req, res) => {
  const id = req.params.id;
  const updatedItem = req.body;
  data[id] = updatedItem;
  res.json(updatedItem);
});

// Delete
app.delete('/api/items/:id', (req, res) => {
  const id = req.params.id;
  data.splice(id, 1);
  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
Frontend (React with TypeScript):
tsx
Copy code
// App.tsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Items from './Items';
import ItemDetail from './ItemDetail';
import AddItem from './AddItem';
import UpdateItem from './UpdateItem';
import { ItemProvider } from './ItemContext';

const App: React.FC = () => {
  return (
    <Router>
      <ItemProvider>
        <Switch>
          <Route exact path="/" component={Items} />
          <Route exact path="/items/:id" component={ItemDetail} />
          <Route exact path="/add" component={AddItem} />
          <Route exact path="/update/:id" component={UpdateItem} />
        </Switch>
      </ItemProvider>
    </Router>
  );
};

export default App;
tsx
Copy code
// ItemContext.tsx
import React, { createContext, useContext, useState } from 'react';

interface Item {
  id: number;
  name: string;
}

interface ItemContextType {
  items: Item[];
  addItem: (item: Item) => void;
  updateItem: (id: number, item: Item) => void;
  deleteItem: (id: number) => void;
}

const ItemContext = createContext<ItemContextType | undefined>(undefined);

export const useItemContext = () => {
  const context = useContext(ItemContext);
  if (!context) {
    throw new Error('useItemContext must be used within an ItemProvider');
  }
  return context;
};

export const ItemProvider: React.FC = ({ children }) => {
  const [items, setItems] = useState<Item[]>([]);

  const addItem = (item: Item) => {
    setItems([...items, item]);
  };

  const updateItem = (id: number, updatedItem: Item) => {
    setItems(
      items.map((item) => (item.id === id ? { ...item, ...updatedItem } : item))
    );
  };

  const deleteItem = (id: number) => {
    setItems(items.filter((item) => item.id !== id));
  };

  return (
    <ItemContext.Provider value={{ items, addItem, updateItem, deleteItem }}>
      {children}
    </ItemContext.Provider>
  );
}
