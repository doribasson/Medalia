User
full code of pagination node ts with react ts

2 / 2

ChatGPT
Creating a full code example for pagination involves both server-side (Node.js/Express) and client-side (React) components. Here's a basic example that you can extend based on your specific requirements. We'll use TypeScript for both the Node.js server and React client.

Node.js (Express) Server
typescript
Copy code
// server.ts
import express, { Request, Response } from 'express';
import cors from 'cors';

const app = express();
const PORT = 5000;

app.use(cors());

// Mock data for demonstration
const data = Array.from({ length: 50 }, (_, index) => ({ id: index + 1, name: `Item ${index + 1}` }));

app.get('/api/data', (req: Request, res: Response) => {
  const { page = 1, pageSize = 10 } = req.query;
  const start = (Number(page) - 1) * Number(pageSize);
  const end = start + Number(pageSize);

  const paginatedData = data.slice(start, end);

  res.json({
    data: paginatedData,
    totalItems: data.length,
  });
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
React Client
tsx
Copy code
// App.tsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

interface Item {
  id: number;
  name: string;
}

interface ApiResponse {
  data: Item[];
  totalItems: number;
}

const App: React.FC = () => {
  const [data, setData] = useState<Item[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get<ApiResponse>(`http://localhost:5000/api/data`, {
          params: {
            page: currentPage,
            pageSize: 10, // You can adjust the page size as needed
          },
        });
        setData(response.data.data);
        setTotalPages(Math.ceil(response.data.totalItems / 10)); // Assuming pageSize is 10
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, [currentPage]);

  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
  };

  return (
    <div>
      <h1>Pagination Example</h1>
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>

      <div>
        {Array.from({ length: totalPages }, (_, index) => (
          <button key={index + 1} onClick={() => handlePageChange(index + 1)}>
            {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default App;















































full code of pagination node ts with  redux and react ts

3 / 3

ChatGPT
Certainly! Below is an example of a simple pagination system using Node.js with TypeScript for the backend and React with TypeScript for the frontend. Redux is used for state management.

Backend (Node.js with TypeScript and Express):

Install the necessary packages:
bash
Copy code
npm init -y
npm install express typescript ts-node
Create a tsconfig.json file for TypeScript configuration:
json
Copy code
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true
  }
}
Create a src/index.ts file for the backend:
typescript
Copy code
// src/index.ts
import express, { Request, Response } from 'express';

const app = express();
const port = 3001;

app.use(express.json());

const itemsPerPage = 5;

const data = Array.from({ length: 30 }, (_, index) => ({ id: index + 1, name: `Item ${index + 1}` }));

app.get('/api/items', (req: Request, res: Response) => {
  const { page } = req.query;
  const currentPage = parseInt(page as string, 10) || 1;

  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;

  const paginatedData = data.slice(startIndex, endIndex);

  res.json({
    data: paginatedData,
    totalPages: Math.ceil(data.length / itemsPerPage),
    currentPage,
  });
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
Add a start script to package.json:
json
Copy code
{
  "scripts": {
    "start": "ts-node src/index.ts"
  }
}
Start the backend server:
bash
Copy code
npm start
Frontend (React with TypeScript and Redux):

Install the necessary packages:
bash
Copy code
npx create-react-app pagination-app --template typescript
cd pagination-app
npm install redux react-redux @types/react-redux redux-thunk
Modify src/App.tsx to implement pagination:
tsx
Copy code
// src/App.tsx
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from './app/store';
import { fetchItems } from './features/items/itemsSlice';

const App: React.FC = () => {
  const dispatch = useDispatch();
  const { items, totalPages, currentPage } = useSelector((state: RootState) => state.items);

  useEffect(() => {
    dispatch(fetchItems(currentPage));
  }, [dispatch, currentPage]);

  const handlePagination = (page: number) => {
    dispatch(fetchItems(page));
  };

  return (
    <div>
      <h1>Pagination App</h1>
      <ul>
        {items.map((item) => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
      <div>
        {Array.from({ length: totalPages }, (_, index) => (
          <button key={index + 1} onClick={() => handlePagination(index + 1)}>
            {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default App;
Create a Redux slice for managing items in src/features/items/itemsSlice.ts:
tsx
Copy code
// src/features/items/itemsSlice.ts
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

interface Item {
  id: number;
  name: string;
}

interface ItemsState {
  items: Item[];
  totalPages: number;
  currentPage: number;
}

const initialState: ItemsState = {
  items: [],
  totalPages: 1,
  currentPage: 1,
};

export const fetchItems = createAsyncThunk('items/fetchItems', async (page: number) => {
  const response = await fetch(`http://localhost:3001/api/items?page=${page}`);
  return response.json();
});

export const itemsSlice = createSlice({
  name: 'items',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchItems.fulfilled, (state, action) => {
        state.items = action.payload.data;
        state.totalPages = action.payload.totalPages;
        state.currentPage = action.payload.currentPage;
      });
  },
});

export const selectItems = (state: RootState) => state.items;

export default itemsSlice.reducer;
Modify src/app/store.ts to combine the reducers:
tsx
Copy code
// src/app/store.ts
import { configureStore } from '@reduxjs/toolkit';
import itemsReducer from '../features/items/itemsSlice';

export const store = configureStore({
  reducer: {
    items: itemsReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
Start the React app:
bash
Copy code
npm start